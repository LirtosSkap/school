/*
  Color variables regular and hover
 */

/*
  Fibonacci shortcuts for vw
 */

/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: top;
}

/* HTML5 display-role reset for older browsers */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after {
  content: '';
  content: none;
}

q:before,
q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

input:focus::-webkit-input-placeholder {
  color: transparent;
}

input:focus:-moz-placeholder {
  color: transparent;
}

/* FF 4-18 */

input:focus::-moz-placeholder {
  color: transparent;
}

/* FF 19+ */

input:focus:-ms-input-placeholder {
  color: transparent;
}

/* IE 10+ */

a {
  cursor: pointer;
  font-size: inherit;
}

body {
  -webkit-user-select: none;
  -moz-user-select: -moz-none;
  -ms-user-select: none;
  user-select: none;
}

img {
  -webkit-user-drag: none;
  -khtml-user-drag: none;
  -moz-user-drag: none;
  -o-user-drag: none;
  user-drag: none;
}

* {
  vertical-align: top;
  box-sizing: border-box;
}

.pull-right {
  float: right;
}

.list-inline {
  display: inline-block;
}

.list-inline li {
  display: inline-block;
}

.tint-overlay {
  -webkit-filter: grayscale;
  /*sepia, hue-rotate, invert....*/
  -webkit-filter: brightness(50%);
}

/*
    Center element vertically and horizontally
    Parent element should have position relative
    
    usage : @include centerer;
 */

/*
  Mixin to customize scrollbars
  Beware, this does not work in all browsers
  @author Hugo Giraudel
  @param {Length} $size - Horizontal scrollbar's height and vertical scrollbar's width
  @param {Color} $foreground-color - Scrollbar's color
  @param {Color} $background-color [mix($foreground-color, white, 50%)] - Scrollbar's color
  @example scss - Scrollbar styling
  @include scrollbars(.5em, slategray);
  */

/*
  Mixin used to keep element aspect ratio
  https://css-tricks.com/snippets/sass/maintain-aspect-ratio-mixin/
 
 */

/*
  Function for converting PX to VW.
  As a result, the function returns the pixel value from the width (1920px) of the window.

  Usage: padding: fnW(16); //result: padding: 0.83333333vw

 */

/*
  Function for converting PX to VH.
  As a result, the function returns the pixel value from the height (1200px) of the window.

  Usage: padding: fnH(16); //result: padding: 1.33333333vh

 */

/* Turn on custom 8px wide scrollbar */

::-webkit-scrollbar {
  width: 10px;
  /* 1px wider than Lion. */
  /* This is more usable for users trying to click it. */
  background-color: transparent;
  -webkit-border-radius: 100px;
}

/* hover effect for both scrollbar area, and scrollbar 'thumb' */

::-webkit-scrollbar:hover {
  background-color: rgba(0, 0, 0, 0.09);
}

/* The scrollbar 'thumb' ...that marque oval shape in a scrollbar */

::-webkit-scrollbar-thumb:vertical {
  /* This is the EXACT color of Mac OS scrollbars. 
     Yes, I pulled out digital color meter */
  background: rgba(0, 0, 0, 0.5);
  -webkit-border-radius: 100px;
  background-clip: padding-box;
  border: 2px solid transparent;
  min-height: 10px;
  /*Prevent it from getting too small */
}

::-webkit-scrollbar-thumb:vertical:active {
  background: rgba(0, 0, 0, 0.61);
  /* Some darker color when you click it */
  -webkit-border-radius: 100px;
}

body {
  margin: 0;
}

header {
  background-color: #222222;
  width: 100%;
  height: 4.635vw;
  margin: auto;
}

.logo {
  display: block;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */